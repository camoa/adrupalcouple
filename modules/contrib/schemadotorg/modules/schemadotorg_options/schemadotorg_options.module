<?php

/**
 * @file
 * Set allowed values for list (options) fields.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageManager;
use Drupal\Core\Locale\CountryManager;

/**
 * Implements hook_schemadotorg_property_field_type_alter().
 */
function schemadotorg_options_schemadotorg_property_field_type_alter(array &$field_types, string $schema_type, string $schema_property): void {
  // Set default field type for Schema.org properties with allowed values.
  if (\Drupal::config('schemadotorg_options.settings')
    ->get("property_allowed_values.$schema_property")) {
    $field_types = ['list_string' => 'list_string'] + $field_types;
    return;
  }

  // Do not adjust the property's field type if a default field type is defined.
  /** @var \Drupal\schemadotorg\SchemaDotOrgEntityFieldManagerInterface $schema_field_manager */
  $schema_field_manager = \Drupal::service('schemadotorg.entity_field_manager');
  $default_field = $schema_field_manager->getPropertyDefaultField($schema_type, $schema_property);
  if (!empty($default_field['type'])) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  $range_includes = $schema_type_manager->getPropertyRangeIncludes($schema_property);
  foreach ($range_includes as $range_include) {
    // Set default field type to list string for allowed values function.
    $allowed_values_function = 'schemadotorg_options_allowed_values_' . strtolower($range_include);
    if (function_exists($allowed_values_function)) {
      $field_types = ['list_string' => 'list_string'] + $field_types;
      return;
    }

    // Set default field type to list string for enumerations.
    if ($schema_type_manager->isEnumerationType($range_include)) {
      $field_types = ['list_string' => 'list_string'] + $field_types;
      return;
    }
  }
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_options_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings
): void {
  // Only alter 'list_string' fields without allowed values.
  if ($field_storage_values['type'] !== 'list_string'
    || !empty($field_storage_values['settings']['allowed_values'])
    || !empty($field_storage_values['settings']['allowed_values_function'])) {
    return;
  }

  // Set allowed values based on the Schema.org property.
  $property_allowed_values = \Drupal::config('schemadotorg_options.settings')
    ->get("property_allowed_values.$schema_property");
  if ($property_allowed_values) {
    $field_storage_values['settings'] = [
      'allowed_values' => $property_allowed_values,
      'allowed_values_function' => '',
    ];
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  $property_definition = $schema_type_manager->getProperty($schema_property);
  if (!$property_definition) {
    return;
  }

  // Set allowed values based the Schema.org types range includes.
  $range_includes = $schema_type_manager->parseIds($property_definition['range_includes']);

  // Set allowed values function if it exists.
  // @see schemadotorg_options_allowed_values_country()
  // @see schemadotorg_options_allowed_values_language()
  foreach ($range_includes as $range_include) {
    $allowed_values_function = 'schemadotorg_options_allowed_values_' . strtolower($range_include);
    if (function_exists($allowed_values_function)) {
      $field_storage_values['settings'] = [
        'allowed_values' => [],
        'allowed_values_function' => $allowed_values_function,
      ];
      return;
    }
  }

  // Set allowed values from all range includes that are enumerations.
  $allowed_values = [];
  foreach ($range_includes as $range_include) {
    if ($schema_type_manager->isEnumerationType($range_include)) {
      $allowed_values += $schema_type_manager->getTypeChildrenAsOptions($range_include);
    }
  }

  // Remove allowed values suffixes based on the Schema.org property.
  $property_allowed_values_suffix = \Drupal::config('schemadotorg_options.settings')
    ->get("property_allowed_values_suffixes.$schema_property");
  if ($property_allowed_values_suffix) {
    foreach ($allowed_values as $value => $text) {
      $allowed_values[$value] = str_replace(' ' . $property_allowed_values_suffix, '', $text);
    }
  }

  if (isset($allowed_values)) {
    $field_storage_values['settings'] = [
      'allowed_values' => $allowed_values,
      'allowed_values_function' => '',
    ];
  }
}

/* ************************************************************************** */
// Schema.org properties settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::afterBuildDetails
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::formAlter
 */
function schemadotorg_options_form_schemadotorg_properties_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['schemadotorg_options'] = [
    '#type' => 'details',
    '#title' => t('Options settings'),
  ];
  $form['schemadotorg_options']['property_allowed_values'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Schema.org property allowed values'),
    '#description' => t('Enter Schema.org properties with allowed values.'),
    '#description_link' => 'properties',
    '#example' => '
propertyName:
  option01: Option 1
  option02: Options 2
',
  ];
  $form['schemadotorg_options']['property_allowed_values_suffixes'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Schema.org property allowed values suffixes'),
    '#description' => t('Enter Schema.org properties with allowed values suffixes that should be removed..'),
    '#description_link' => 'properties',
    '#example' => 'propertyName: suffix',
  ];
}

/* ************************************************************************** */
// Allowed values function callbacks.
/* ************************************************************************** */

/**
 * HOOK_options_allowed_values_SCHEMA_TYPE()
 */
function schemadotorg_options_allowed_values_country(): array {
  return CountryManager::getStandardList();
}

/**
 * HOOK_options_allowed_values_SCHEMA_TYPE()
 */
function schemadotorg_options_allowed_values_language(): array {
  $languages = LanguageManager::getStandardLanguageList();
  unset($languages['en-x-simple']);
  $allowed_values = [];
  foreach ($languages as $language) {
    $allowed_values[$language[0]] = $language[0];
  }
  return $allowed_values;
}
