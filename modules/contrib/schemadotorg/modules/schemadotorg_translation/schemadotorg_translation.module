<?php

/**
 * @file
 * Manages translations for Schema.org types and properties as they are created.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_translation_help(string $route_name, RouteMatchInterface $route_match): string|array|NULL {
  if ($route_name === 'schemadotorg_translation.settings') {
    return '<p>' . t('The <em>Schema.org translations settings</em> page allows administrators to configure which field names and types are excluded or included for allowing translations.') . '<p>';
  }

  return NULL;
}

/**
 * Implements hook_schemadotorg_mapping_insert().
 */
function schemadotorg_translation_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $mapping): void {
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  /** @var \Drupal\schemadotorg_translation\SchemaDotOrgTranslationManagerInterface $manager */
  $manager = \Drupal::service('schemadotorg_translation.manager');
  $manager->enableMapping($mapping);
}

/**
 * Implements hook_field_config_insert().
 */
function schemadotorg_translation_field_config_insert(FieldConfigInterface $field_config): void {
  /** @var \Drupal\schemadotorg_translation\SchemaDotOrgTranslationManagerInterface $manager */
  $manager = \Drupal::service('schemadotorg_translation.manager');
  $manager->enableMappingField($field_config);
}

/**
 * Implements hook_schemadotorg_jsonld_schema_type_entity_alter().
 */
function schemadotorg_translation_schemadotorg_jsonld_schema_type_entity_alter(array &$data, EntityInterface $entity): void {
  // Make sure the entity has Schema.org mapping.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
  $mapping = \Drupal::entityTypeManager()
    ->getStorage('schemadotorg_mapping')
    ->loadByEntity($entity);
  if (!$mapping) {
    return;
  }

  // Make sure we are dealing with a content entity with translations.
  if (!$entity instanceof ContentEntityInterface
    || empty($entity->getTranslationLanguages(FALSE))) {
    return;
  }

  // Check that Schema.org mapping type is a CreativeWork which
  // supports translations.
  // @see https://schema.org/workTranslation
  // @see https://schema.org/translationOfWork
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  $schema_type = $mapping->getSchemaType();
  if (!$schema_type_manager->isSubTypeOf($schema_type, 'CreativeWork')) {
    return;
  }

  // Get current language translation for the entity.
  $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $entity = $entity->getTranslation($current_langcode);

  if ($entity->isDefaultTranslation()) {
    // Default translation list all translations
    // using https://schema.org/workTranslation.
    $data['workTranslation'] = [];
    $translation_languages = $entity->getTranslationLanguages(FALSE);
    foreach ($translation_languages as $translation_language) {
      $translation = $entity->getTranslation($translation_language->getId());
      $data['workTranslation'][] = [
        '@type' => $data['@type'],
        '@id' => $translation->toUrl()->setAbsolute()->toString(),
      ];
    }
  }
  else {
    // Translation reference default
    // using https://schema.org/translationOfWork.
    // Get the default language.
    // Currently, Drupal does not provide an easy way to get this information.
    // @see \Drupal\Core\Entity\ContentEntityBase::$defaultLangcode
    $default_languages = array_diff_key(
      $entity->getTranslationLanguages(),
      $entity->getTranslationLanguages(FALSE)
    );
    $default_language = reset($default_languages);
    $default_translation = $entity->getTranslation($default_language->getId());
    $data['translationOfWork'] = ['@id' => $default_translation->toUrl()->setAbsolute()->toString()];
  }
}
