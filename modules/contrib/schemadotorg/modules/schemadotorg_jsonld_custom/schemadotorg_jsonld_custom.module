<?php

/**
 * @file
 * Allows custom JSON-LD to be added to Schema.org mapping.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;

/**
 * Implements hook_schemadotorg_mapping_defaults_alter().
 */
function schemadotorg_jsonld_custom_schemadotorg_mapping_defaults_alter(array &$defaults, string $entity_type_id, ?string $bundle, string $schema_type): void {
  /** @var \Drupal\schemadotorg_jsonld_custom\SchemaDotOrgJsonLdCustomInterface $custom_manager */
  $custom_manager = \Drupal::service('schemadotorg_jsonld_custom.manager');
  $custom_manager->alterMappingDefaults($defaults, $entity_type_id, $bundle, $schema_type);
}

/**
 * Implements hook_schemadotorg_jsonld_schema_type_entity_load().
 */
function schemadotorg_jsonld_custom_schemadotorg_jsonld_schema_type_entity_load(array &$data, EntityInterface $entity): void {
  /** @var \Drupal\schemadotorg_jsonld_custom\SchemaDotOrgJsonLdCustomInterface $custom_manager */
  $custom_manager = \Drupal::service('schemadotorg_jsonld_custom.manager');
  $custom_manager->loadSchemaTypeEntityJsonLd($data, $entity);
}

/**
 * Implements hook_schemadotorg_jsonld().
 */
function schemadotorg_jsonld_custom_schemadotorg_jsonld(RouteMatchInterface $route_match): ?array {
  /** @var \Drupal\schemadotorg_jsonld_custom\SchemaDotOrgJsonLdCustomInterface $custom_manager */
  $custom_manager = \Drupal::service('schemadotorg_jsonld_custom.manager');
  return $custom_manager->buildRouteMatchJsonLd($route_match);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function schemadotorg_jsonld_custom_form_schemadotorg_mapping_form_alter(array &$form, FormStateInterface &$form_state): void {
  if (!\Drupal::moduleHandler()->moduleExists('schemadotorg_ui')) {
    return;
  }

  /** @var \Drupal\schemadotorg\Form\SchemaDotOrgMappingForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
  $mapping = $form_object->getEntity();

  // Exit if no Schema.org type has been selected.
  if (!$mapping->getSchemaType()) {
    return;
  }

  $mapping_defaults = $form_state->get('mapping_defaults');

  $json = $mapping_defaults['third_party_settings']['schemadotorg_jsonld_custom']['json'] ?? '';
  $form['mapping']['third_party_settings']['schemadotorg_jsonld_custom'] = [
    '#type' => 'details',
    '#title' => t('Schema.org JSON-LD custom'),
    '#open' => (boolean) $json,
  ];
  $form['mapping']['third_party_settings']['schemadotorg_jsonld_custom']['json'] = [
    '#type' => 'textarea',
    '#title' => t('Custom JSON-LD'),
    '#description' => t('Enter valid JSON to be added to this Schema.org mappings JSON-LD.'),
    '#default_value' => $json,
    '#element_validate' => ['_schemadotorg_jsonld_custom_json_element_validate'],
    '#attributes' => [
      'class' => ['schemadotorg-codemirror'],
      'data-mode' => 'application/ld+json',
    ],
    '#attached' => ['library' => ['schemadotorg/codemirror.javascript']],
  ];
}

/**
 * Form API callback. Validate element's JSON.
 */
function _schemadotorg_jsonld_custom_json_element_validate(array &$element, FormStateInterface $form_state, array &$completed_form): void {
  $json = $element['#value'];

  if ($json === '') {
    $form_state->unsetValue($element['#parents']);
  }
  else {
    // Replace all tokens with 'null' to allow the JSON to be validated.
    $json = preg_replace('#\[[a-z][^]]+\]#', 'null', $json);
    @json_decode($json);
    if (json_last_error() !== JSON_ERROR_NONE) {
      $form_state->setError($element, t('The JSON is not valid. %error', ['%error' => json_last_error_msg()]));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_jsonld_custom_form_schemadotorg_jsonld_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['schemadotorg_jsonld_custom'] = [
    '#type' => 'details',
    '#title' => t('JSON-LD custom settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_jsonld_custom']['path_json'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE,
    '#settings_format' => '/some/path|JSON',
    '#title' => t('Path custom JSON-LD'),
    '#description' => t('Enter the custom JSON-LD for a path.'),
    '#element_validate' => ['_schemadotorg_jsonld_custom_json_settings_validate'],
  ];
  $form['schemadotorg_jsonld_custom']['default_schema_type_json'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE,
    '#settings_format' => 'entity_type--SchemaType|JSON or SchemaType|JSON',
    '#title' => t('Default Schema.org type custom JSON-LD'),
    '#description' => t('Enter the default JSON-LD for Schema.org types.'),
    '#element_validate' => ['_schemadotorg_jsonld_custom_json_settings_validate'],
  ];
  $form['schemadotorg_jsonld_custom']['default_schema_mapping_json'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE,
    '#settings_format' => 'entity_type--SchemaType|JSON or SchemaType|JSON',
    '#title' => t('Default Schema.org mapping custom JSON-LD'),
    '#description' => t('Enter the default JSON-LD for new Schema.org mappings.'),
    '#element_validate' => ['_schemadotorg_jsonld_custom_json_settings_validate'],
  ];
}

/**
 * Form API callback. Validate associative settings array's JSON.
 */
function _schemadotorg_jsonld_custom_json_settings_validate(array &$element, FormStateInterface $form_state, array &$completed_form): void {
  $value = $form_state->getValue($element['#parents']);
  foreach ($value as $key => $json) {
    // Replace all tokens with 'null' to allow the JSON to be validated.
    $json = preg_replace('#\[[a-z][^]]+\]#', 'null', $json);
    @json_decode($json);
    if (json_last_error() !== JSON_ERROR_NONE) {
      $t_args = [
        '%key' => $key,
        '%error' => json_last_error_msg(),
      ];
      $form_state->setError($element, t('The JSON is not valid for %key. %error', $t_args));
    }
  }
}
